import json 
from tkinter import *
from tkinter.ttk import *

TEST_FUNCTION_TEMPLATE = """
# generated by 
"""




def generate_diamond(block, distance, height=None, distanceZ=None, with_test_function=False):
    """ Generates a predicate to check in a diamond-shaped area.

    @param block: the block object to be checked, includes state, tag, or ID.\n
    @param distance: the "radius" of the pyramid, or its size\n
    @param height (optional): how tall the pyramid should be. By default it is the same as distance
    @param distanceZ (optional): affects the Z size of the pyramid. If specified, distance is treated as the X-size. 
    By default is same as distance\n
    @param with_test_function (default=False): A boolean that determines whether or not to also output a .mcfunction
    file that will generate a test size area. 
    """
    if distanceZ == None:
        distanceZ = distance
    
    if height == None:
        height = distance

    block_check = {
        "condition": "minecraft:alternative",
        "terms": []
    }
    
    if with_test_function:
        try:
            name = block.get('id', block['tag'])
            test_function = open('near_' + name.split(':')[-1] + '.mcfunction', 'w')
        except KeyErorr:
            raise ValueError('A block id or tag must be specified!')

    for dy in range (-height, height + 1):
        width = distance - abs(dy) # decrease width as we move away from the centre
        for dx in range(-width, width + 1):
            for dz in range(-width, width + 1):
                block_check["terms"].append({
                    "condition": "minecraft:location_check",
                    "offsetX": dx,
                    "offsetY": dy,
                    "offsetZ": dz,
                    "predicate": {
                        "block": block
                    }
                })

                if with_test_function:
                    test_function.write()

    outfile = open('near_' + name + '.json', 'w')
    outfile.write(json.dumps(campfire_check, sort_keys=True, indent=4))
    outfile.close()




if __name__ == '__main__':
    # block_name = input('Enter block name: ')
    # distance = int(input('Enter distance: '))
    # generate_as_predicate(block_name, distance)

    # exit_token = input('Press ENTER to exit...')